version: "3.8"

services:
  backend:
    image: ce7ar/glasses-shop-backend:latest
    ports:
      - "8080:8080"
    deploy:
      replicas: 1
      update_config:
        order: start-first
      rollback_config:
        order: stop-first

    networks:
      - ochelari_network

  db:
    image: mysql:latest
    restart: always
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 'root'
    volumes:
      - db:/var/lib/mysql
      - "./data.sql:/docker-entrypoint-initdb.d/data.sql"
    deploy:
      placement:
        constraints: [ node.role == manager ]
    networks:
      - ochelari_network

  adminer_container:
    image: adminer:latest
    environment:
      ADMINER_DEFAULT_SERVER: db
      ADMINER_DESIGN: galkaev
    ports:
      - "8082:8080"
    networks:
      - ochelari_network

  agent:
    image: portainer/agent:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    networks:
      - portainer_network
    deploy:
      mode: global
      placement:
        constraints: [ node.platform.os == linux ]

  portainer:
    image: portainer/portainer-ee:latest
    command: [ "-H", "tcp://tasks.agent:9001", "--tlsskipverify" ]
    ports:
      - "8000:8000"
      - "9000:9000"
      - "9443:9443"
    volumes:
      - portainer_data:/data
    networks:
      - portainer_network
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [ node.role == manager ]

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - "./prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      - monitoring_network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    deploy:
      placement:
        constraints: [ node.role == manager ]
    environment:
      GF_SERVER_ROOT_URL: /grafana/
    networks:
      - monitoring_network
    depends_on:
      - prometheus

  kong:
    image: kong:latest
    volumes:
      - "./Kong:/usr/local/kong/declarative"
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
    ports:
      - "80:8000"
      - "443:8443"
      - "8001:8001"
      - "8444:8444"
    deploy:
      placement:
        constraints: [ node.role == manager ]
    networks:
      - ochelari_network
      - monitoring_network
      - portainer_network

volumes:
  db:
  portainer_data:


networks:
  ochelari_network:
  monitoring_network:
  portainer_network:
    driver: overlay
    attachable: true
